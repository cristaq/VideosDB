Cristache Cristian Valentin 321CD

Project structure:

****************************************************************************

./src/action
Here are 3 interfaces for each type of action: Command, Query,
and Recommend. They select the message to write to the JSONArray from other functions,
and write it. They contain only static functions and require no implementation.

****************************************************************************

./src/actor:
The actor class along with the types of awards they can have.

****************************************************************************

./src/database
We have 3 types of databases: ActorDatabase, UserDatabase and VideoDatabase.
Each has a LinkedHashMap field where we store the actors, users or
videos from the input. VideoDatabase has 2, one for movies, one
for series. Each has a query implementation method
corresponding to the data type and a method for populating the database.

****************************************************************************

./src/entertainment
    Video class - an abstract class containing common fields and methods
for movies and series. What is not common is implemented in the
respective classes. Specifically, it differs how the rating is calculated
and duration but also how we add a rating. So, rating, getDuration and addrating
are abstract methods, to be implemented in Movie and Show.

    Class Movie and Show - subclasses for Video.

    User class - holds all user related details

*****************************************************************************

PROGRAM FLOW:
    Initialize the databases: actor, user and video.
    Take each action individually and call the corresponding function:
Command, Query or Recommendation. They call different methods depending on
the subtype of the action. The messages obtained by them are written in JSONArray.
    For Command, the user has one function for each type. Videos are modified to add 
views, favourites or ratings.
    For Query, each class involved has a function that resolves
that query. They all involve pretty much the same steps: creating an ArrayList query,
sorting by some criteria (longest, awards etc), and formulating
the message to put in the JSONArray.
    For Recommend, all functions are in the interface. But it requires about
same steps as query.
