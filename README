Cristache Cristian Valentin 321CD

Structura proiectului:

****************************************************************************

./src/action
Aici se afla 3 interfete pentru fiecare tip de actiune: Command, Query,
si Recommend. Ele optin mesajul de scris in JSONArray din alte functii,
si il scriu. Contin doar functii statice si nu necesita implementari.

****************************************************************************

./src/actor:
Clasa actor impreuna cu tipurile de awards pe care le pot avea.

****************************************************************************

./src/database
Avem 3 tipuri de baze de date: ActorDatabase, UserDatabase si VideoDatabse.
Fiecare are cate un camp LinkedHashMap unde retin actorii, userii sau
videourile din input. VideoDatabase are 2, unul pentru filme, unul
pentru seriale. Fiecare are o metoda de implementare a query-ului
corespunzator tipului de date si o metoda pentru popularea database-ului.

****************************************************************************

./src/entertainment
    Clasa Video - o clasa abstracta care contine campurile si metodele comune
pentru filme si seriale. Ce nu este in comun este implementat in clasele
respective. Mai exact, difera modalitatea prin care se caluleaza ratingul
si durata dar si cum adaugam un rating. Deci, rating, getDuration si addrating
sunt metode abstracte, de impementat in Movie si Show.

    Clasa Movie si Show - subclase pentru Video.

    Clasa User - retine toate detaliile legate de user

*****************************************************************************

FLOW-UL PROGRAMULUI:
    Se initializeaza bazele de date: actor, user si video.
    Se ia fiecare actiune in parte si se apeleaza functia corespunzatoare:
Command, Query sau Recommendation. Ele apeleaza diferite metode in functie
de subtipul actiunii. Mesajele obtinute de ele sunt scrise in JSONArray.
    Pentru Command, user are o functie pentru fiecare tip. Se modifica insa
si videourile pentru a le adauga views, favourites sau ratinguri.
    Pentru Query, fiecare clasa implicata are o functie care rezolva
acel query. Toate presupun cam aceeasi pasi: creearea unui ArrayList query,
sortarea dupa un anumit criteriu (longest, awards etc), si formularea
mesajului de pus in JSONArray.
    Pentru Recommend, toate functiile sunt in interfata. Prespune insa cam
aceeasi pasi ca si query.